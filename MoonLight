if game.PlaceId == 17625359962 then


local players = game:GetService("Players")
local player = players.LocalPlayer

-- Tworzenie głównego GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LoadingScreen"
screenGui.Parent = player:FindFirstChild("PlayerGui") or player:WaitForChild("PlayerGui")
screenGui.IgnoreGuiInset = true
screenGui.ResetOnSpawn = false -- Nie resetuje się po respawnie

-- Tworzenie tła (ciemne z fioletowym gradientem)
local background = Instance.new("Frame")
background.Size = UDim2.new(0, 300, 0, 200)  -- 300x200 pikseli (około 15x10 cm)
background.Position = UDim2.new(0.5, -150, 0, -200) -- Początkowo poza ekranem, schodzi z góry
background.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
background.BorderSizePixel = 0
background.Parent = screenGui

-- Gradient efektu cienia
local gradient = Instance.new("UIGradient")
gradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(80, 0, 150)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 30))
}
gradient.Rotation = 90
gradient.Parent = background

-- Zaokrąglenie rogów
local uicorner = Instance.new("UICorner")
uicorner.CornerRadius = UDim.new(0.1, 0)
uicorner.Parent = background

-- Napis "Welcome to MoonLight"
local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(0.6, 0, 0.1, 0)
textLabel.Position = UDim2.new(0.2, 0, 0.3, 0)
textLabel.Text = "Welcome to MoonLight"
textLabel.TextColor3 = Color3.fromRGB(200, 180, 255)
textLabel.Font = Enum.Font.GothamBold
textLabel.TextSize = 24  -- Zmniejszyliśmy rozmiar tekstu do 24
textLabel.BackgroundTransparency = 1
textLabel.Parent = background

-- Pasek ładowania (kontener)
local loadingBarBg = Instance.new("Frame")
loadingBarBg.Size = UDim2.new(0.6, 0, 0.05, 0)
loadingBarBg.Position = UDim2.new(0.2, 0, 0.5, 0)
loadingBarBg.BackgroundColor3 = Color3.fromRGB(50, 50, 70)
loadingBarBg.BorderSizePixel = 0
loadingBarBg.Parent = background

local uicornerBarBg = Instance.new("UICorner")
uicornerBarBg.CornerRadius = UDim.new(1, 0)
uicornerBarBg.Parent = loadingBarBg

-- Pasek ładowania (wypełnienie)
local loadingBar = Instance.new("Frame")
loadingBar.Size = UDim2.new(0, 0, 1, 0)
loadingBar.BackgroundColor3 = Color3.fromRGB(150, 0, 255)
loadingBar.BorderSizePixel = 0
loadingBar.Parent = loadingBarBg

local uicornerBar = Instance.new("UICorner")
uicornerBar.CornerRadius = UDim.new(1, 0)
uicornerBar.Parent = loadingBar

-- **Animacja schodzenia GUI z góry**
background:TweenPosition(UDim2.new(0.5, -150, 0.5, -100), "Out", "Quint", 1.5, true)

-- **Animacja ładowania**
for i = 1, 100 do
    loadingBar:TweenSize(UDim2.new(i/100, 0, 1, 0), "Out", "Quint", 0.03, true)
    wait(0.03)
end

-- **Znikanie GUI po załadowaniu**
wait(1)
screenGui:Destroy()



local ReGui = loadstring(game:HttpGet('https://raw.githubusercontent.com/depthso/Dear-ReGui/refs/heads/main/ReGui.lua'))()
local PrefabsId = `rbxassetid://{ReGui.PrefabsId}`

--// Externally import the Prefabs asset
ReGui:Init({
	Prefabs = game:GetService("InsertService"):LoadLocalAsset(PrefabsId)
})
ReGui:DefineTheme("Cherry", {
	TitleAlign = Enum.TextXAlignment.Center,
	TextDisabled = Color3.fromRGB(120, 100, 120),
	Text = Color3.fromRGB(200, 180, 200),
	
	FrameBg = Color3.fromRGB(25, 20, 25),
	FrameBgTransparency = 0.4,
	FrameBgActive = Color3.fromRGB(120, 100, 120),
	FrameBgTransparencyActive = 0.4,
	
	CheckMark = Color3.fromRGB(150, 100, 150),
	SliderGrab = Color3.fromRGB(150, 100, 150),
	ButtonsBg = Color3.fromRGB(150, 100, 150),
	CollapsingHeaderBg = Color3.fromRGB(150, 100, 150),
	CollapsingHeaderText = Color3.fromRGB(200, 180, 200),
	RadioButtonHoveredBg = Color3.fromRGB(150, 100, 150),
	
	WindowBg = Color3.fromRGB(35, 30, 35),
	TitleBarBg = Color3.fromRGB(35, 30, 35),
	TitleBarBgActive = Color3.fromRGB(50, 45, 50),
	
	Border = Color3.fromRGB(50, 45, 50),
	ResizeGrab = Color3.fromRGB(50, 45, 50),
	RegionBgTransparency = 1,
})








local Window1 = ReGui:Window({
	Title = "Key system",
	Size = UDim2.fromOffset(300, 100),
	NoCollapse = true,
	NoResize = true,
	Theme = "Cherry",
	NoClose = true
}):Center()

local Key = Window1:InputText({
	Label = "Key",
	PlaceHolder = "Key here",
	Value = "",
})

Window1:Button({
	Text = "Enter",
	Callback = function()
		-- Successful
		if Key:GetValue() == "MoonLightTop" then
		Window1:Close()
		do
















--highlights
local Players = game:GetService("Players")

local highlights = {} -- Przechowuje referencje do Highlightów
local highlightEnabled = true -- Kontroluje, czy Highlighty powinny być włączone

local function createBoxAroundCharacter(character)
    if not highlightEnabled then return end -- Jeśli Highlighty są wyłączone, nie dodawaj ich

    if not character or not character:FindFirstChild("HumanoidRootPart") then return end

    -- Usuń istniejący Highlight, aby uniknąć duplikatów
    local existingHighlight = highlights[character]
    if existingHighlight then
        existingHighlight:Destroy()
    end

    -- Tworzenie nowego Highlight
    local highlight = Instance.new("Highlight")
    highlight.Adornee = character
    highlight.Parent = character
    highlight.FillColor = Color3.fromRGB(213, 52, 235)
    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)

    -- Przechowujemy Highlight w tabeli
    highlights[character] = highlight
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        task.wait(0.5) -- Czekamy, aż postać się wczyta
        createBoxAroundCharacter(character)
    end)
end

-- Funkcja włączająca podświetlenie
local function enableHighlight()
    highlightEnabled = true
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character then
            createBoxAroundCharacter(player.Character)
        end
    end
end

-- Funkcja wyłączająca podświetlenie
local function disableHighlight()
    highlightEnabled = false
    for character, highlight in pairs(highlights) do
        if highlight then
            highlight:Destroy()
        end
    end
    highlights = {} -- Czyści tabelę
end

-- Dodanie highlighta dla już obecnych graczy
for _, player in ipairs(Players:GetPlayers()) do
    if player.Character then
        createBoxAroundCharacter(player.Character)
    end
    onPlayerAdded(player)
end

-- Obsługa nowych graczy
Players.PlayerAdded:Connect(onPlayerAdded)

-- Przykłady użycia:
-- enableHighlight()  -- Włącza podświetlenie
-- disableHighlight() -- Wyłącza podświetlenie






















--Name ESP
local Players = game:GetService("Players")

local nameTags = {}
local nameEnabled = true

local function createESP(player)
    if player == Players.LocalPlayer then return end -- Pomija lokalnego gracza

    local function onCharacterAdded(character)
        local head = character:FindFirstChild("Head")
        if not head then return end

        -- Tworzenie BillboardGui dla nazwy
        local billboard = Instance.new("BillboardGui")
        billboard.Adornee = head
        billboard.Size = UDim2.new(0, 100, 0, 30) -- Przywrócony oryginalny rozmiar
        billboard.StudsOffset = Vector3.new(0, 2, 0) -- Pozycja nad głową
        billboard.AlwaysOnTop = true
        billboard.Enabled = nameEnabled

        local textLabel = Instance.new("TextLabel")
        textLabel.Parent = billboard
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = player.Name
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- Biały tekst
        textLabel.TextStrokeTransparency = 0 -- Widoczna obwódka
        textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Czarna obwódka
        textLabel.TextScaled = true
        textLabel.Font = Enum.Font.SourceSansBold

        billboard.Parent = character
        nameTags[player] = billboard
    end

    -- Jeśli gracz ma już postać, dodajemy ESP
    if player.Character then
        onCharacterAdded(player.Character)
    end

    -- Nasłuchiwanie na odradzanie się gracza
    player.CharacterAdded:Connect(onCharacterAdded)
end

-- Włączanie i wyłączanie ESP
function enableName()
    nameEnabled = true
    for _, tag in pairs(nameTags) do
        if tag then
            tag.Enabled = true
        end
    end
end

function disableName()
    nameEnabled = false
    for _, tag in pairs(nameTags) do
        if tag then
            tag.Enabled = false
        end
    end
end

-- Dodajemy ESP dla istniejących graczy
for _, player in pairs(Players:GetPlayers()) do
    createESP(player)
end

-- Dodajemy ESP dla nowych graczy
Players.PlayerAdded:Connect(function(player)
    createESP(player)
end)


































--BOX
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local espBoxes = {}
local MAX_DISTANCE = 250 -- Maksymalna odległość, w której ESP będzie wyświetlane

local function createESPBox(player)
    if player == LocalPlayer then return end

    local box = Drawing.new("Square")
    local outerBox1 = Drawing.new("Square")
    local outerBox2 = Drawing.new("Square")

    local thickness = 2
    local borderThickness = thickness * 0.5 

    box.Thickness = thickness
    box.Color = Color3.fromRGB(255, 255, 255)
    box.Filled = false
    box.Visible = false

    outerBox1.Thickness = borderThickness
    outerBox1.Color = Color3.fromRGB(0, 0, 0)
    outerBox1.Filled = false
    outerBox1.Visible = false

    outerBox2.Thickness = borderThickness
    outerBox2.Color = Color3.fromRGB(0, 0, 0)
    outerBox2.Filled = false
    outerBox2.Visible = false

    local function update()
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local head = player.Character:FindFirstChild("Head")
            local distance = (rootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

            if head and distance <= MAX_DISTANCE then
                local headPos, headOnScreen = Camera:WorldToViewportPoint(head.Position)
                local rootPos, rootOnScreen = Camera:WorldToViewportPoint(rootPart.Position)

                if headOnScreen and rootOnScreen then
                    local height = math.abs(headPos.Y - rootPos.Y)
                    local width = height * 0.6 

                    local boxSize = Vector2.new(width * 3, height * 4)
                    local boxPos = Vector2.new(rootPos.X - boxSize.X / 2, rootPos.Y - boxSize.Y / 2)

                    box.Size = boxSize
                    box.Position = boxPos
                    
                    outerBox1.Size = boxSize + Vector2.new(borderThickness * 2, borderThickness * 2)
                    outerBox1.Position = boxPos - Vector2.new(borderThickness, borderThickness)

                    outerBox2.Size = boxSize - Vector2.new(borderThickness * 2, borderThickness * 2)
                    outerBox2.Position = boxPos + Vector2.new(borderThickness, borderThickness)

                    box.Visible = true
                    outerBox1.Visible = true
                    outerBox2.Visible = true
                else
                    box.Visible = false
                    outerBox1.Visible = false
                    outerBox2.Visible = false
                end
            else
                box.Visible = false
                outerBox1.Visible = false
                outerBox2.Visible = false
            end
        else
            box.Visible = false
            outerBox1.Visible = false
            outerBox2.Visible = false
        end
    end

    RunService.RenderStepped:Connect(update)
    espBoxes[player.UserId] = {box = box, outerBox1 = outerBox1, outerBox2 = outerBox2}
end

local function enableBox()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and not espBoxes[player.UserId] then
            createESPBox(player)
        end
    end
end

local function disableBox()
    for _, player in pairs(Players:GetPlayers()) do
        local boxes = espBoxes[player.UserId]
        if boxes then
            boxes.box:Remove()
            boxes.outerBox1:Remove()
            boxes.outerBox2:Remove()
            espBoxes[player.UserId] = nil
        end
    end
end

for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        createESPBox(player)
    end
end

Players.PlayerAdded:Connect(createESPBox)
































--healthbar
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local healthBars = {}
local healthEnabled = true -- Kontroluje, czy Health Bary powinny być włączone

local function createHealthBar(player)
    if player == Players.LocalPlayer then return end
    if not healthEnabled then return end -- Nie dodawaj, jeśli wyłączone

    local function onCharacterAdded(character)
        if not healthEnabled then return end -- Nie dodawaj po respawnie, jeśli wyłączone

        local head = character:WaitForChild("Head", 5)
        local humanoid = character:WaitForChild("Humanoid", 5)
        if not head or not humanoid then return end

        local billboard = Instance.new("BillboardGui")
        billboard.Adornee = head
        billboard.Size = UDim2.new(1, 0, 3, 0)
        billboard.StudsOffset = Vector3.new(2, -2, 0)
        billboard.AlwaysOnTop = true

        local background = Instance.new("Frame")
        background.Size = UDim2.new(0.3, 0, 1, 0)
        background.Position = UDim2.new(0.5, 0, 0, 0)
        background.AnchorPoint = Vector2.new(0.5, 0)
        background.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        background.BorderSizePixel = 0
        background.Parent = billboard

        local healthBar = Instance.new("Frame")
        healthBar.Size = UDim2.new(1, 0, 1, 0)
        healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        healthBar.BorderSizePixel = 0
        healthBar.Position = UDim2.new(0, 0, 1, 0)
        healthBar.AnchorPoint = Vector2.new(0, 1)
        healthBar.Parent = background

        local function updateHealth()
            if humanoid and healthBar then
                local healthPercent = humanoid.Health / humanoid.MaxHealth
                healthBar.Size = UDim2.new(1, 0, healthPercent, 0)

                if healthPercent > 0.6 then
                    healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                elseif healthPercent > 0.3 then
                    healthBar.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
                else
                    healthBar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                end
            end
        end

        local connection
        connection = RunService.RenderStepped:Connect(function()
            if not humanoid.Parent or humanoid.Health <= 0 then
                connection:Disconnect()
                billboard:Destroy()
                healthBars[player.UserId] = nil
            else
                updateHealth()
            end
        end)

        billboard.Parent = character
        healthBars[player.UserId] = billboard
    end

    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

local function enableHealth()
    healthEnabled = true
    for _, player in pairs(Players:GetPlayers()) do
        if not healthBars[player.UserId] then
            createHealthBar(player)
        end
    end
end

local function disableHealth()
    healthEnabled = false
    for userId, billboard in pairs(healthBars) do
        if billboard then
            billboard:Destroy()
        end
    end
    healthBars = {} -- Czyścimy tabelę
end

for _, player in pairs(Players:GetPlayers()) do
    createHealthBar(player)
end

Players.PlayerAdded:Connect(createHealthBar)

-- Przykłady użycia:
-- enableHealth()  -- Włącza paski zdrowia
-- disableHealth() -- Wyłącza paski zdrowia

























--kolorowyswiat
local function enablePurple()


local Lighting = game:GetService("Lighting")

-- Sprawdzenie, czy istnieje już Sky, jeśli nie, to dodajemy nowy
local sky = Lighting:FindFirstChildOfClass("Sky")
if not sky then
    sky = Instance.new("Sky")
    sky.Parent = Lighting
end

-- Ustawienie fioletowego nieba
--sky.SkyboxUp = "rbxassetid://653735694"   -- Tekstura nieba (możesz zmienić ID)
--sky.SkyboxDn = "rbxassetid://653735694"
--sky.SkyboxLf = "rbxassetid://653735694"
--sky.SkyboxRt = "rbxassetid://653735694"
--sky.SkyboxFt = "rbxassetid://653735694"
--sky.SkyboxBk = "rbxassetid://653735694"

-- Możesz też zmienić kolor otoczenia dla lepszego efektu
Lighting.Ambient = Color3.fromRGB(128, 0, 128)  -- Fioletowe oświetlenie
Lighting.OutdoorAmbient = Color3.fromRGB(100, 0, 150)  -- Ciemniejszy fiolet na zewnątrz

end

local function disablePurple()


local Lighting = game:GetService("Lighting")

-- Sprawdzenie, czy istnieje już Sky, jeśli nie, to dodajemy nowy
local sky = Lighting:FindFirstChildOfClass("Sky")
if not sky then
    sky = Instance.new("Sky")
    sky.Parent = Lighting
end

-- Ustawienie fioletowego nieba
--sky.SkyboxUp = "rbxassetid://6412503613"   -- Tekstura nieba (możesz zmienić ID)
--sky.SkyboxDn = "rbxassetid://6444884785"
--sky.SkyboxLf = "rbxassetid://6444884337"
--sky.SkyboxRt = "rbxassetid://6444884337"
--sky.SkyboxFt = "rbxassetid://6444884337"
--sky.SkyboxBk = "rbxassetid://6444884337"

-- Możesz też zmienić kolor otoczenia dla lepszego efektu
Lighting.Ambient = Color3.fromRGB(128, 128, 128)  -- Fioletowe oświetlenie
Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)  -- Ciemniejszy fiolet na zewnątrz

end






















--noclip
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local players = game:GetService("Players")
local player = players.LocalPlayer

local baseFlySpeed = 50
local turboMultiplier = 5
local flying = false
local bodyVelocity
local noclipConnection
local character, humanoid, humanoidRootPart

-- Funkcja do pobrania nowej postaci po respawnie
local function setupCharacter()
    character = player.Character or player.CharacterAdded:Wait()
    humanoid = character:WaitForChild("Humanoid")
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end

setupCharacter() -- Inicjalizacja przy starcie gry

-- Wyłączanie kolizji
local function toggleNoclip(state)
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not state
        end
    end
end

-- Rozpoczęcie latania
local function startFlying()
    if flying then return end
    flying = true

    humanoid.PlatformStand = true
    toggleNoclip(true)

    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyVelocity.Parent = humanoidRootPart

    noclipConnection = runService.Stepped:Connect(function()
        toggleNoclip(true)
    end)

    runService.RenderStepped:Connect(function()
        if flying then
            local moveDirection = Vector3.new(0, 0, 0)

            if userInputService:IsKeyDown(Enum.KeyCode.W) then
                moveDirection = moveDirection + humanoidRootPart.CFrame.LookVector
            end
            if userInputService:IsKeyDown(Enum.KeyCode.S) then
                moveDirection = moveDirection - humanoidRootPart.CFrame.LookVector
            end
            if userInputService:IsKeyDown(Enum.KeyCode.A) then
                moveDirection = moveDirection - humanoidRootPart.CFrame.RightVector
            end
            if userInputService:IsKeyDown(Enum.KeyCode.D) then
                moveDirection = moveDirection + humanoidRootPart.CFrame.RightVector
            end
            if userInputService:IsKeyDown(Enum.KeyCode.Space) then
                moveDirection = moveDirection + Vector3.new(0, 1, 0)
            end
            if userInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                moveDirection = moveDirection - Vector3.new(0, 1, 0)
            end

            local flySpeed = baseFlySpeed
            if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                flySpeed = baseFlySpeed * turboMultiplier
            end

            if moveDirection.Magnitude > 0 then
                bodyVelocity.Velocity = moveDirection.Unit * flySpeed
            else
                bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            end
        else
            bodyVelocity:Destroy()
        end
    end)
end

-- Zatrzymanie latania
local function stopFlying()
    flying = false
    humanoid.PlatformStand = false
    toggleNoclip(false)
    if bodyVelocity then
        bodyVelocity:Destroy()
    end
    if noclipConnection then
        noclipConnection:Disconnect()
    end
end



-- Po śmierci gracza skrypt resetuje się i ponownie inicjalizuje
player.CharacterAdded:Connect(function()
    setupCharacter()
    stopFlying() -- Resetujemy stan latania po respawnie
end)






















	--aimbot
	local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local FOV_RADIUS = 100
local AIMBOT_ENABLED = false
local fovCircle

-- Zmienne do przechowywania połączeń
local renderSteppedConnection
local inputBeganConnection
local inputEndedConnection

local function createFOVCircle()
    if fovCircle then
        fovCircle:Remove()
    end

    fovCircle = Drawing.new("Circle")
    fovCircle.Color = Color3.new(1, 1, 1)
    fovCircle.Thickness = 1
    fovCircle.Radius = FOV_RADIUS
    fovCircle.Filled = false
    fovCircle.Visible = true
end

local function getClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = FOV_RADIUS
    local mouseLocation = UserInputService:GetMouseLocation()
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local headPosition = Camera:WorldToViewportPoint(player.Character.Head.Position)
            local screenPosition = Vector2.new(headPosition.X, headPosition.Y)
            local distance = (screenPosition - mouseLocation).Magnitude
            
            if distance < shortestDistance then
                closestPlayer = player
                shortestDistance = distance
            end
        end
    end
    
    return closestPlayer
end

local function enableAimbot()
    createFOVCircle()

    renderSteppedConnection = RunService.RenderStepped:Connect(function()
        if fovCircle then
            fovCircle.Position = UserInputService:GetMouseLocation()
        end

        if AIMBOT_ENABLED then
            local target = getClosestPlayer()
            if target and target.Character and target.Character:FindFirstChild("Head") then
                local headPosition = Camera:WorldToViewportPoint(target.Character.Head.Position)
                mousemoverel((headPosition.X - UserInputService:GetMouseLocation().X) / 2, (headPosition.Y - UserInputService:GetMouseLocation().Y) / 2)
            end
        end
    end)

    inputBeganConnection = UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            AIMBOT_ENABLED = true
        end
    end)

    inputEndedConnection = UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            AIMBOT_ENABLED = false
        end
    end)
end

local function disableAimbot()
    if renderSteppedConnection then renderSteppedConnection:Disconnect() end
    if inputBeganConnection then inputBeganConnection:Disconnect() end
    if inputEndedConnection then inputEndedConnection:Disconnect() end

    if fovCircle then
        fovCircle:Remove()
        fovCircle = nil
    end

    AIMBOT_ENABLED = false
end

	
	







--update
function updateFOV()
    if not fovCircle then
        createFOVCircle() -- Tworzy nowy okrąg, jeśli nie istnieje
    end
    fovCircle.Visible = false  
    fovCircle.Radius = FOV_RADIUS  
    fovCircle.Visible = true   
end










--trigger
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Camera = game:GetService("Workspace").CurrentCamera
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local TRIGGER_ACTIVE = false  -- Czy TriggerBot jest aktywny?

-- Przechowywanie połączeń, aby można było je wyłączyć
local inputBeganConnection
local inputEndedConnection
local triggerLoop

local function isEnemy(target)
    if target and target.Parent then
        local character = target.Parent
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        return humanoid and character ~= LocalPlayer.Character
    end
    return false
end

local function triggerShoot()
    if Mouse.Target and isEnemy(Mouse.Target) then
        mouse1press()
        wait(0.05)
        mouse1release()
    end
end

local function enableTriggerBot()
    if inputBeganConnection or inputEndedConnection or triggerLoop then return end

    inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then  -- PPM naciśnięty
            TRIGGER_ACTIVE = true
            triggerLoop = task.spawn(function()
                while TRIGGER_ACTIVE do
                    triggerShoot()
                    task.wait(0.01)  -- Szybkie strzelanie
                end
            end)
        end
    end)

    inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then  -- PPM puszczony
            TRIGGER_ACTIVE = false
        end
    end)
end

local function disableTriggerBot()
    if inputBeganConnection then inputBeganConnection:Disconnect() inputBeganConnection = nil end
    if inputEndedConnection then inputEndedConnection:Disconnect() inputEndedConnection = nil end
    if triggerLoop then task.cancel(triggerLoop) triggerLoop = nil end
    TRIGGER_ACTIVE = false
end












































--// Tabs
local players = game:GetService("Players")
local playerName = players.LocalPlayer.Name

-- Sprawdzamy, czy nazwa gracza to jedna z określonych nazw
local title = "MoonLight | Logged as: " .. playerName

-- Warunek, który dodaje "[Owner]" do tytułu, jeśli gracz to jeden z określonych
if playerName == "9009TestH1K0" or playerName == "9009testJog1" then
    title = title .. " [Owner]"
else
    -- Dla innych graczy dodajemy "[Customer]"
    title = title .. " [User]"
end

-- Tworzenie okna z tytułem zawierającym nazwę użytkownika
local Window = ReGui:Window({
    Title = title,  -- Ustawiamy dynamiczny tytuł z nazwą gracza
    Theme = "Cherry",
    NoClose = true,
    Size = UDim2.new(0, 600, 0, 400),
}):Center()

local ModalWindow = Window:PopupModal({
	Title = "MoonLight Info",
	AutoSize = "Y"
})

ModalWindow:Label({
	Text = [[Last Update : 19.03.2025]],
	TextWrapped = true
})
ModalWindow:Separator()

ModalWindow:Button({
	Text = "Okay",
	Callback = function()
		ModalWindow:ClosePopup()
	end,
})

local Group = Window:List({
	UiPadding = 2,
	HorizontalFlex = Enum.UIFlexAlignment.Fill,
})

local TabsBar = Group:List({
	Border = true,
	UiPadding = 5,
	BorderColor = Window:GetThemeKey("Border"),
	BorderThickness = 1,
	HorizontalFlex = Enum.UIFlexAlignment.Fill,
	HorizontalAlignment = Enum.HorizontalAlignment.Center,
	AutomaticSize = Enum.AutomaticSize.None,
	FlexMode = Enum.UIFlexMode.None,
	Size = UDim2.new(0, 40, 1, 0),
	CornerRadius = UDim.new(0, 5)
})
local TabSelector = Group:TabSelector({
	NoTabsBar = true,
	Size = UDim2.fromScale(0.5, 1)
})

local function CreateTab(Name: string, Icon)
	local Tab = TabSelector:CreateTab({
		Name = Name
	})

	local List = Tab:List({
		HorizontalFlex = Enum.UIFlexAlignment.Fill,
		UiPadding = 1,
		Spacing = 10
	})

	local Button = TabsBar:Image({
		Image = Icon,
		Ratio = 1,
		RatioAxis = Enum.DominantAxis.Width,
		Size = UDim2.fromScale(1, 1),
		Callback = function(self)
			TabSelector:SetActiveTab(Tab)
		end,
	})

	ReGui:SetItemTooltip(Button, function(Canvas)
		Canvas:Label({
			Text = Name
		})
	end)

	return List
end

local function CreateRegion(Parent, Title)
	local Region = Parent:Region({
		Border = true,
		BorderColor = Window:GetThemeKey("Border"),
		BorderThickness = 1,
		CornerRadius = UDim.new(0, 5)
	})

	Region:Label({
		Text = Title
	})

	return Region
end

local Combat = CreateTab("Combat", 139650104834071)
local Visuals = CreateTab("Visuals", 18854794412)
local Misc = CreateTab("Misc", 8498174594)
local Settings = CreateTab("Settings", ReGui.Icons.Settings)

--// Combat Tab
local AimbotSection = CreateRegion(Combat, "AimBot") 
local TriggerSection = CreateRegion(Combat, "TriggerBot") 




AimbotSection:Checkbox({
	Value = false,
	Label = "AimBot",
	Callback = function(self, Value: boolean)
		if Value == true then
			enableAimbot()
		end	
		if Value == false then
			disableAimbot()
		end
end
})



AimbotSection:SliderInt({
	Label = "FOV Size",
 	Value = 100,
	Minimum = 50,
	Maximum = 500,
	Callback = function(self, Value)
	FOV_RADIUS = Value
	updateFOV()

	end,
})







--trigger

TriggerSection:Checkbox({
	Value = false,
	Label = "TriggerBot",
	Callback = function(self, Value: boolean)
		if Value == true then
			enableTriggerBot()
		end	
		if Value == false then
			disableTriggerBot()
		end
end
})






--// Visuals
local MainSection = CreateRegion(Visuals, "Main") 
local MoreSection = CreateRegion(Visuals, "More") 


MainSection:Checkbox({
	Value = false,
	Label = "HighLights",
	Callback = function(self, Value: boolean)
		if Value == true then
										
			enableHighlight()

		end
		if Value == false then
			disableHighlight()		--loadstring(game:HttpGet("https://pastebin.com/raw/EYdMXKW1"))()
		end
	
	end
})




MainSection:Checkbox({
	Value = false,
	Label = "Box ESP",
	Callback = function(self, Value: boolean)
		if Value == true then
			enableBox()
		end	
		if Value == false then
			disableBox()
		end
end
})








-- More

MoreSection:Checkbox({
	Value = false,
	Label = "Health Bar",
	Callback = function(self, Value: boolean)
		if Value == true then
			enableHealth()
		end	
		if Value == false then
			disableHealth()
		end
end
})

MoreSection:Checkbox({
	Value = false,
	Label = "Name Tag",
	Callback = function(self, Value: boolean)
		if Value == true then
			enableName()
		end	
		if Value == false then
			disableName()
		end
end
})


local SelfSection = CreateRegion(Misc, "Self") 
local FunSection = CreateRegion(Misc, "Fun") 
local DiscordSection = CreateRegion(Misc, "Discord") 






SelfSection:Checkbox({
	Value = false,
	Label = "NoClip",
	Callback = function(self, Value: boolean)
		if Value == true then
			startFlying()
		end	
		if Value == false then
			stopFlying()
		end
end
})







FunSection:Checkbox({
	Value = false,
	Label = "Purple World",
	Callback = function(self, Value: boolean)
		if Value == true then
			enablePurple()
		end	
		if Value == false then
			disablePurple()
		end
end
})



FunSection:Button({
	Text = "Delete ViewModel",
	Callback = function()
		
		local viewModels = game.Workspace:WaitForChild("ViewModels")

-- Iteracja przez wszystkie obiekty w ViewModels
for _, model in pairs(viewModels:GetChildren()) do
    model:Destroy()  -- Usuwamy każdy obiekt
end

		
	end,
})











DiscordSection:Button({
	Text = "Copy Link",
	Callback = function()
		
		setclipboard("https://discord.gg/E4uF2TeSpe")
		
	end,
})











--// Settings
local OptionsSection = CreateRegion(Settings, "Options") 
local ConfigSection = CreateRegion(Settings, "Configurations") 

OptionsSection:Keybind({
	Label = "Show / Hide GUI",
	Value = Enum.KeyCode.RightShift,
	Callback = function(_, NewKeybind)
		local IsVisible = Window.Visible
		Window:SetVisible(not IsVisible)
	end
})

OptionsSection:Button({
	Text = "Unload Script",
	Callback = function()
		Window:Close()
	end
})

--// Configurations
ConfigSection:Combo({
	Label = "Config",
	Items = {
		"Legit",
		"Rage",
		"Blatant"
	},
	Selected = 1,
})



end			-- Unsuccessful
		else
			Key:SetLabel("Wrong key!")
		end
	end,
})
end--rivals only
