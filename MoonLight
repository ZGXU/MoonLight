local ReGui = loadstring(game:HttpGet('https://raw.githubusercontent.com/depthso/Dear-ReGui/refs/heads/main/ReGui.lua'))()
local PrefabsId = `rbxassetid://{ReGui.PrefabsId}`

--// Externally import the Prefabs asset
ReGui:Init({
	Prefabs = game:GetService("InsertService"):LoadLocalAsset(PrefabsId)
})




local Window = ReGui:Window({
	Title = "Key system",
	Size = UDim2.fromOffset(300, 100),
	NoCollapse = true,
	NoResize = true,
	NoClose = true
})

local Key = Window:InputText({
	Label = "Key",
	PlaceHolder = "Key here",
	Value = "",
})

Window:Button({
	Text = "Enter",
	Callback = function()
		-- Successful
		if Key:GetValue() == "MoonLightTop" then
		Window:Close()
			do --// Tabs window demo
	
	
		
	


type Button = {
	Text: string?,
	Callback: ((...any) -> unknown)?
}



type RadioButton = {
	Label: string?,
	IsRadio: boolean?,
	Value: boolean,
	NoAnimation: boolean?,
	Callback: ((...any) -> unknown)?,
	SetTicked: (self: Checkbox, Value: boolean, NoAnimation: boolean) -> ...any,
	Toggle: (self: Checkbox) -> ...any
}
	





--kolorowyswiat
local function enablePurple()


local Lighting = game:GetService("Lighting")

-- Sprawdzenie, czy istnieje już Sky, jeśli nie, to dodajemy nowy
local sky = Lighting:FindFirstChildOfClass("Sky")
if not sky then
    sky = Instance.new("Sky")
    sky.Parent = Lighting
end

-- Ustawienie fioletowego nieba
sky.SkyboxUp = "rbxassetid://5917331294"   -- Tekstura nieba (możesz zmienić ID)
sky.SkyboxDn = "rbxassetid://5917331294"
sky.SkyboxLf = "rbxassetid://5917331294"
sky.SkyboxRt = "rbxassetid://5917331294"
sky.SkyboxFt = "rbxassetid://5917331294"
sky.SkyboxBk = "rbxassetid://5917331294"

-- Możesz też zmienić kolor otoczenia dla lepszego efektu
Lighting.Ambient = Color3.fromRGB(128, 0, 128)  -- Fioletowe oświetlenie
Lighting.OutdoorAmbient = Color3.fromRGB(100, 0, 150)  -- Ciemniejszy fiolet na zewnątrz

end

local function disablePurple()


local Lighting = game:GetService("Lighting")

-- Sprawdzenie, czy istnieje już Sky, jeśli nie, to dodajemy nowy
local sky = Lighting:FindFirstChildOfClass("Sky")
if not sky then
    sky = Instance.new("Sky")
    sky.Parent = Lighting
end

-- Ustawienie fioletowego nieba
sky.SkyboxUp = "rbxassetid://5917331294"   -- Tekstura nieba (możesz zmienić ID)
sky.SkyboxDn = "rbxassetid://5917331294"
sky.SkyboxLf = "rbxassetid://5917331294"
sky.SkyboxRt = "rbxassetid://5917331294"
sky.SkyboxFt = "rbxassetid://5917331294"
sky.SkyboxBk = "rbxassetid://5917331294"

-- Możesz też zmienić kolor otoczenia dla lepszego efektu
Lighting.Ambient = Color3.fromRGB(128, 128, 128)  -- Fioletowe oświetlenie
Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)  -- Ciemniejszy fiolet na zewnątrz

end






















--noclip
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local players = game:GetService("Players")
local player = players.LocalPlayer

local baseFlySpeed = 50
local turboMultiplier = 5
local flying = false
local bodyVelocity
local noclipConnection
local renderConnection
local character, humanoid, humanoidRootPart

-- Pobieranie postaci po respawnie
local function setupCharacter()
    character = player.Character or player.CharacterAdded:Wait()
    humanoid = character:WaitForChild("Humanoid")
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end

setupCharacter()

-- Funkcja do włączania/wyłączania kolizji
local function toggleNoclip(state)
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not state
        end
    end
end

-- Rozpoczęcie latania
local function enableFly()
    if flying then return end
    flying = true

    humanoid.PlatformStand = true
    toggleNoclip(true)

    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.zero
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyVelocity.Parent = humanoidRootPart

    noclipConnection = runService.Stepped:Connect(function()
        toggleNoclip(true)
    end)

    renderConnection = runService.RenderStepped:Connect(function()
        if not flying then return end
        local moveDirection = Vector3.zero

        if userInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDirection += humanoidRootPart.CFrame.LookVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDirection -= humanoidRootPart.CFrame.LookVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDirection -= humanoidRootPart.CFrame.RightVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDirection += humanoidRootPart.CFrame.RightVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection += Vector3.new(0, 1, 0)
        end
        if userInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            moveDirection -= Vector3.new(0, 1, 0)
        end

        local flySpeed = baseFlySpeed
        if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
            flySpeed *= turboMultiplier
        end

        if moveDirection.Magnitude > 0 then
            bodyVelocity.Velocity = moveDirection.Unit * flySpeed
        else
            bodyVelocity.Velocity = Vector3.zero
        end
    end)
end

-- Zatrzymanie latania
local function disableFly()
    if not flying then return end
    flying = false
    humanoid.PlatformStand = false
    toggleNoclip(false)

    if bodyVelocity then
        bodyVelocity:Destroy()
        bodyVelocity = nil
    end
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    if renderConnection then
        renderConnection:Disconnect()
        renderConnection = nil
    end
end

-- Automatycznie uruchamia latanie po załadowaniu skryptu
enableFly()

-- Po śmierci gracza resetujemy latanie
player.CharacterAdded:Connect(function()
    setupCharacter()
    enableFly()
end)






















	--aimbot
	local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local FOV_RADIUS = 100
local AIMBOT_ENABLED = false
local fovCircle

-- Zmienne do przechowywania połączeń
local renderSteppedConnection
local inputBeganConnection
local inputEndedConnection

local function createFOVCircle()
    if fovCircle then
        fovCircle:Remove()
    end

    fovCircle = Drawing.new("Circle")
    fovCircle.Color = Color3.new(1, 1, 1)
    fovCircle.Thickness = 1
    fovCircle.Radius = FOV_RADIUS
    fovCircle.Filled = false
    fovCircle.Visible = true
end

local function getClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = FOV_RADIUS
    local mouseLocation = UserInputService:GetMouseLocation()
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local headPosition = Camera:WorldToViewportPoint(player.Character.Head.Position)
            local screenPosition = Vector2.new(headPosition.X, headPosition.Y)
            local distance = (screenPosition - mouseLocation).Magnitude
            
            if distance < shortestDistance then
                closestPlayer = player
                shortestDistance = distance
            end
        end
    end
    
    return closestPlayer
end

local function enableAimbot()
    createFOVCircle()

    renderSteppedConnection = RunService.RenderStepped:Connect(function()
        if fovCircle then
            fovCircle.Position = UserInputService:GetMouseLocation()
        end

        if AIMBOT_ENABLED then
            local target = getClosestPlayer()
            if target and target.Character and target.Character:FindFirstChild("Head") then
                local headPosition = Camera:WorldToViewportPoint(target.Character.Head.Position)
                mousemoverel((headPosition.X - UserInputService:GetMouseLocation().X) / 2, (headPosition.Y - UserInputService:GetMouseLocation().Y) / 2)
            end
        end
    end)

    inputBeganConnection = UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            AIMBOT_ENABLED = true
        end
    end)

    inputEndedConnection = UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            AIMBOT_ENABLED = false
        end
    end)
end

local function disableAimbot()
    if renderSteppedConnection then renderSteppedConnection:Disconnect() end
    if inputBeganConnection then inputBeganConnection:Disconnect() end
    if inputEndedConnection then inputEndedConnection:Disconnect() end

    if fovCircle then
        fovCircle:Remove()
        fovCircle = nil
    end

    AIMBOT_ENABLED = false
end

	
	










--trigger
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Camera = game:GetService("Workspace").CurrentCamera
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local TRIGGER_ACTIVE = false  -- Czy TriggerBot jest aktywny?

-- Przechowywanie połączeń, aby można było je wyłączyć
local inputBeganConnection
local inputEndedConnection
local triggerLoop

local function isEnemy(target)
    if target and target.Parent then
        local character = target.Parent
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        return humanoid and character ~= LocalPlayer.Character
    end
    return false
end

local function triggerShoot()
    if Mouse.Target and isEnemy(Mouse.Target) then
        mouse1press()
        wait(0.05)
        mouse1release()
    end
end

local function enableTriggerBot()
    if inputBeganConnection or inputEndedConnection or triggerLoop then return end

    inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton2 then  -- PPM naciśnięty
            TRIGGER_ACTIVE = true
            triggerLoop = task.spawn(function()
                while TRIGGER_ACTIVE do
                    triggerShoot()
                    task.wait(0.01)  -- Szybkie strzelanie
                end
            end)
        end
    end)

    inputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then  -- PPM puszczony
            TRIGGER_ACTIVE = false
        end
    end)
end

local function disableTriggerBot()
    if inputBeganConnection then inputBeganConnection:Disconnect() inputBeganConnection = nil end
    if inputEndedConnection then inputEndedConnection:Disconnect() inputEndedConnection = nil end
    if triggerLoop then task.cancel(triggerLoop) triggerLoop = nil end
    TRIGGER_ACTIVE = false
end

-- Funkcja do przełączania TriggerBota


	
	
	
	
	
	local Window = ReGui:TabsWindow({
		Title = "MoonLight",
		Size = UDim2.fromOffset(300, 200),
		NoResize = true
		
		
		
	})
	
	local Tab1 = Window:CreateTab({Name=`Combat`})
	Tab1:Label({
		
		Text = `aimbot tab`

		})
	
	Tab1:Checkbox({
	Value = false,
	Label = "AimBot",
	Callback = function(self, Value: boolean)
		if Value == true then
			enableAimbot()
		end	
		if Value == false then
			disableAimbot()
		end
end
})

Tab1:Checkbox({
	Value = false,
	Label = "TriggerBot",
	Callback = function(self, Value: boolean)
		if Value == true then
			enableTriggerBot()
		end	
		if Value == false then
			disableTriggerBot()
		end
end
})





	local Tab2 = Window:CreateTab({Name=`Visuals`})
	Tab2:Label({
		
		Text = `esp tab`

		})

	Tab2:Checkbox({
	Value = false,
	Label = "HighLights",
	Callback = function(self, Value: boolean)
		if Value == true then
											local Players = game:GetService("Players")

											local function createBoxAroundCharacter(character)
												-- Sprawdź, czy postać istnieje
												if not character or not character:FindFirstChild("HumanoidRootPart") then return end

												-- Usuń istniejący Highlight, aby uniknąć duplikatów
												local existingHighlight = character:FindFirstChildOfClass("Highlight")
												if existingHighlight then
													existingHighlight:Destroy()
												end

												-- Tworzenie nowego Highlight
												local highlight = Instance.new("Highlight")
												highlight.Adornee = character
												highlight.Parent = character
												highlight.FillColor = Color3.fromRGB(213, 52, 235) 
												highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
											end

											local function onPlayerAdded(player)
												-- Nasłuchuj, kiedy postać zostanie dodana
												player.CharacterAdded:Connect(function(character)
													-- Odczekaj chwilę, aby upewnić się, że postać została załadowana
													task.wait(0.5)
													createBoxAroundCharacter(character)
												end)
											end

											-- Dodanie highlighta dla już obecnych graczy
											for _, player in ipairs(Players:GetPlayers()) do
												if player.Character then
													createBoxAroundCharacter(player.Character)
												end
												onPlayerAdded(player)
											end

											-- Obsługa nowych graczy
											Players.PlayerAdded:Connect(onPlayerAdded)


		end
		if Value == false then
		loadstring(game:HttpGet("https://pastebin.com/raw/EYdMXKW1"))()
		end
	
	end
})



local Tab3 = Window:CreateTab({Name=`Other`})
	Tab3:Label({
		
		Text = `other tab`

		})




Tab3:Checkbox({
	Value = false,
	Label = "NoClip",
	Callback = function(self, Value: boolean)
		if Value == true then
			enableFly()
		end	
		if Value == false then
			disableFly()
		end
end
})



Tab3:Checkbox({
	Value = false,
	Label = "Purple World",
	Callback = function(self, Value: boolean)
		if Value == true then
			enablePurple()
		end	
		if Value == false then
			disablePurple()
		end
end
})




local Tab4 = Window:CreateTab({Name=`Settings`})
	Tab4:Label({
		
		Text = `.gg/E4uF2TeSpe   [9009]`

		})
	
	
end			-- Unsuccessful
		else
			Key:SetLabel("Wrong key!")
		end
	end,
})
